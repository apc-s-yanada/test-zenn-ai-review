# .github/workflows/ai-review.yml

name: AI Review by OpenAI

on:
  pull_request:
    types: [opened, synchronize] # プルリクエストが作成/更新された時に実行

permissions:
  pull-requests: write # プルリクエストにコメントを書き込むために必要

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 差分比較のために全履歴を取得

      # 2. 変更があったファイルの内容を取得
      - name: Get PR diff
        id: pr_diff
        run: |
          # mainブランチとの差分を取得し、環境変数にセット
          DIFF=$(git diff origin/main...HEAD)
          echo "diff_content<<EOF" >> $GITHUB_ENV
          echo "$DIFF" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # 3. OpenAI APIを呼び出してレビューを依頼
      - name: Call OpenAI API for Review
        id: openai_review
        uses: actions/github-script@v7
        with:
          script: |
            // OpenAIのAPIキーを環境変数から取得
            const apiKey = process.env.OPENAI_API_KEY;
            // 前のステップで取得した差分内容を取得
            const diffContent = process.env.diff_content;

            // レビュー観点を定義するプロンプト
            const prompt = `
            あなたは優秀な日本語テクニカルエディターです。
            以下のGitの差分テキストをレビューし、Zennの記事として品質を向上させるためのフィードバックをしてください。

            # レビュー観点
            - 誤字脱字や文法的な誤り
            - 不自然な日本語の表現
            - 表記ゆれ（例：「ですます調」と「だである調」の混在など）
            - 技術用語の不適切な使用
            - より分かりやすく、簡潔にするための表現の提案

            # 出力形式
            - 指摘事項がない場合は、「レビューの結果、問題は見つかりませんでした。」とだけ出力してください。
            - 指摘事項がある場合は、具体的な修正案を箇条書きで簡潔に示してください。

            # Git差分
            ${diffContent}
            `;

            const response = await fetch('https://api.openai.com/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${apiKey}`
              },
              body: JSON.stringify({
                model: 'gpt-4o', // 使用するモデル
                messages: [{ role: 'user', content: prompt }]
              })
            });

            const data = await response.json();
            const reviewComment = data.choices[0].message.content;
            
            // 次のステップで使えるように結果をoutputにセット
            core.setOutput('comment', reviewComment);
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      # 4. レビュー結果をプルリクエストにコメントとして投稿
      - name: Post Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 前のステップのレビュー結果を取得
            const reviewComment = "${{ steps.openai_review.outputs.comment }}";

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### 🤖 AIによるレビュー結果\n\n${reviewComment}`
            });

      # 5. レビュー結果、または警告メッセージをプルリクエストにコメントとして投稿 (最終版)
      - name: Post Comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          if [ "${{ steps.check_size.outputs.is_too_large }}" == "true" ]; then
            # 差分が大きすぎた場合の警告メッセージ
            COMMENT_BODY="### ⚠️ AIレビューのスキップ
            今回のコミットの差分が大きすぎるため（15,000文字以上）、AIによるレビューをスキップしました。
            記事をいくつかのセクションに分け、コミットを分割して再度プッシュしてください。"
          else
            # 正常なAIレビュー結果
            COMMENT_BODY="### 🤖 AIによるレビュー結果
            ${{ steps.openai_review.outputs.comment }}"
          fi
          
          # ghコマンドを使って安全にコメントを投稿する
          gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
