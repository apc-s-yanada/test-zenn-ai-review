# .github/workflows/ai-review.yml

name: AI Review by OpenAI

on:
  pull_request:
    types: [opened, synchronize] # プルリクエストが作成/更新された時に実行

permissions:
  pull-requests: write # プルリクエストにコメントを書き込むために必要

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 差分比較のために全履歴を取得

      # 2. 変更があったファイルの内容をファイルに保存
      - name: Get PR diff and save to file
        run: |
          git diff origin/main...HEAD > diff.txt

      # 3. OpenAI APIを呼び出してレビューを依頼 (jqの構文エラー対策版)
      - name: Call OpenAI API for Review
        id: openai_review
        run: |
          # jqの --rawfile オプションを使い、diff.txtの中身を安全に読み込む
          API_RESPONSE=$(jq -n \
            --arg model "gpt-4o" \
            --rawfile diff_content diff.txt \
            '{
              "model": $model,
              "messages": [
                {
                  "role": "user",
                  "content": "あなたは優秀な日本語テクニカルエディターです。\n以下のGitの差分テキストをレビューし、Zennの記事として品質を向上させるためのフィードバックをしてください。\n\n# レビュー観点\n- 誤字脱字や文法的な誤り\n- 不自然な日本語の表現\n- 表記ゆれ（例：「ですます調」と「だである調」の混在など）\n- 技術用語の不適切な使用\n- より分かりやすく、簡潔にするための表現の提案\n\n# 出力形式\n- 指摘事項がない場合は、「レビューの結果、問題は見つかりませんでした。」とだけ出力してください。\n- 指摘事項がある場合は、具体的な修正案を箇条書きで簡潔に示してください。\n\n# Git差分\n" + $diff_content
                }
              ]
            }' | curl -s -X POST "https://api.openai.com/v1/chat/completions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
              -d @-)

          # 返ってきたJSONからレビューコメント部分だけを抽出
          REVIEW_COMMENT=$(echo "$API_RESPONSE" | jq -r '.choices[0].message.content')
          
          # 次のステップで使えるように結果をoutputにセット
          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      # 4. レビュー結果をプルリクエストにコメントとして投稿
      - name: Post Review Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 前のステップのレビュー結果を取得
            const reviewComment = "${{ steps.openai_review.outputs.comment }}";

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `### 🤖 AIによるレビュー結果\n\n${reviewComment}`
            });
